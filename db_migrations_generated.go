// Code generated by go-bindata.
// sources:
// schema/init.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaInitSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\xdb\x6f\xda\x30\x14\xc6\x9f\x93\xbf\xe2\xbc\x01\x1a\x9d\xa6\x6e\x6f\x7b\x4a\x5b\x57\x8b\x46\x43\x17\x92\x89\xee\x25\xf2\xe2\x03\x58\x73\xec\xcc\x97\x5e\xfe\xfb\x29\x17\xb7\x04\x8a\xd4\x76\xda\xc4\x0b\x01\xe7\x3b\x3e\x7c\xdf\x0f\x9f\x70\x9e\x92\x28\x23\x40\x96\x19\x49\x16\xf1\x3c\x81\xf8\x12\x92\x79\x06\x64\x19\x2f\xb2\x05\xd4\xeb\x52\x3f\xd4\x56\x7d\x0e\xc3\x5e\x99\x45\x67\x33\x02\xce\xa0\x36\x30\x0e\x03\xce\x20\xcf\xe3\x0b\xb8\x4e\xe3\xab\x28\xbd\x81\xaf\xe4\x06\x2e\xc8\x65\x94\xcf\x32\x58\xa3\x2c\x34\x95\x4c\x55\x85\x73\x9c\x8d\x27\xd3\x30\x0c\x4a\x8d\xd4\x22\x2b\xa8\x85\x2c\xbe\x22\x8b\x2c\xba\xba\xce\x7e\xb4\x3d\x93\x7c\x36\x7b\x2c\x96\xea\xae\x29\x08\x5c\xcd\x5e\xa3\x0f\x03\x63\x35\xaf\xb1\x28\x9d\xb1\xaa\x42\x5d\x70\x06\x19\x59\x66\xd3\x30\xc0\x8a\x72\xd1\x7e\x78\x2c\x0f\x27\x4f\xce\xf2\x24\xfe\x96\x13\x88\x93\x0b\xb2\xec\x0c\x16\x6d\x45\xe1\x24\xff\x5d\x70\x76\x0f\xf3\xc4\x1b\x17\xea\x0e\xf5\xb8\xbd\x3d\x69\xb6\x38\x39\x01\xa1\xd6\x5c\x82\x55\xbf\x50\x1a\xa0\x1a\x41\x49\x3c\xb1\xbc\x42\xbf\xe6\x0c\x32\xb0\xaa\x17\xf2\x15\x28\xea\xec\x06\x4e\xdf\x7f\x00\x6e\x40\x2a\xdb\x2a\x86\x39\xb7\xda\xa2\xdf\xe0\xf5\x71\x07\xcd\xd7\x2d\x7c\x51\x4a\x2e\x49\x4a\x92\x73\xb2\xe8\x6d\xf8\x14\xde\xc2\x05\xef\x6b\xae\xd1\xbc\x4c\x0f\xef\x20\x4e\x32\x92\x7e\x8f\x66\x30\x3a\xfd\x04\x5f\xe6\x79\xba\x18\x35\x6d\x5b\x6b\x1d\x13\x5f\x81\xb2\x54\x0c\xc7\x5b\x76\x7e\x3e\x58\x34\xe3\x8f\xa7\x93\x29\x8c\x36\x78\x3f\xea\x9d\x31\x38\x9b\xcf\x67\x24\x4a\xf6\xbb\xae\xa8\x30\x78\x10\xee\x76\xaa\xdd\xc5\xe3\x1d\xe6\xdd\x5e\x7b\xbc\x06\x8d\xe1\x6a\x00\xd8\x03\x6d\x30\xa2\xb4\xbc\xa4\x16\xbd\xce\x0c\x39\xfa\xd5\xe3\x62\xd8\xee\x4c\xd7\x28\xed\xf0\x54\x4c\xc3\x80\xd7\xbb\x4b\x7f\xc1\x8a\x96\x96\xdf\xe2\x61\x5a\x56\xbb\xc3\xb0\x7c\x74\x43\x50\x4f\x81\x6e\x43\xaa\xe9\x43\x85\xd2\x76\x78\xee\x36\xd8\xbc\x22\x68\x2c\x95\x66\x40\x85\x78\x12\x54\x94\x21\xdc\x72\x0a\xdd\xb8\x18\xd2\x7a\x54\x1d\x17\xad\xd7\x4c\xc2\xb0\x4f\x64\x85\xc8\x8a\x95\x12\xac\xe9\xde\xa4\xe2\xdf\xab\x55\x7b\x6f\xe7\x77\x3a\x90\x1f\xdd\x78\xdf\x36\xd5\xb9\xe1\x92\xf1\x5b\xce\x1c\x15\x87\xdc\xbc\x09\xe2\x56\x0c\xcf\xb1\x1c\xa4\xf4\xdf\x90\x36\x0d\x6a\xe1\x9a\x87\xc7\xee\x69\x75\x5a\xec\xad\x59\x6e\x05\xbe\xf0\x69\xd7\x1a\xea\xf6\x2e\x9c\x16\xfe\x90\xb5\xf9\x8d\xbb\xf5\x29\x38\x2d\x26\xbb\xff\x03\x6a\x65\xde\x76\x4c\x36\xd4\x6c\xf6\x27\xcc\x3f\xcf\xef\x99\x50\xa6\x61\x50\x2a\x69\xf7\x86\x60\x13\xd6\x9f\x00\x00\x00\xff\xff\xa3\x26\x47\x4a\x1e\x09\x00\x00")

func schemaInitSQLBytes() ([]byte, error) {
	return bindataRead(
		_schemaInitSQL,
		"schema/init.sql",
	)
}

func schemaInitSQL() (*asset, error) {
	bytes, err := schemaInitSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/init.sql", size: 2334, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/init.sql": schemaInitSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"init.sql": {schemaInitSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
