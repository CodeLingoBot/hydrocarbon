// Code generated by go-bindata.
// sources:
// schema/init.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaInitSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\x4d\x6f\xe2\x3a\x14\x86\xd7\xc9\xaf\x38\x3b\x40\x97\x5e\xdd\x5b\x5d\xdd\xcd\xac\xd2\xd6\xd5\x44\x43\x43\x27\x24\x23\x3a\x9b\xc8\x13\x1f\xc0\xc2\xd8\x19\x7f\xb4\xe5\xdf\x8f\xf2\xe1\x96\x40\x91\x0a\xd2\x8c\xba\x21\x70\xf2\xda\xc7\xe7\x7d\x8e\x6d\xae\x53\x12\x65\x04\xc8\x3c\x23\xc9\x2c\x9e\x26\x10\xdf\x42\x32\xcd\x80\xcc\xe3\x59\x36\x83\x6a\x59\xea\x6d\x65\xd5\xa7\x30\xec\x94\x59\x74\x35\x21\xe0\x0c\x6a\x03\xc3\x30\xe0\x0c\xf2\x3c\xbe\x81\xfb\x34\xbe\x8b\xd2\x07\xf8\x42\x1e\xe0\x86\xdc\x46\xf9\x24\x83\x25\xca\x42\x53\xc9\xd4\xa6\x70\x8e\xb3\xe1\x68\x1c\x86\x41\xa9\x91\x5a\x64\x05\xb5\x90\xc5\x77\x64\x96\x45\x77\xf7\xd9\xf7\x26\x67\x92\x4f\x26\x2f\x83\xa5\x7a\xaa\x07\x04\xae\x62\xa7\xe8\xc3\xc0\x58\xcd\x2b\x2c\x4a\x67\xac\xda\xa0\x2e\x38\x83\x8c\xcc\xb3\x71\x18\xe0\x86\x72\xd1\xfc\x78\x19\x1e\x8e\x5e\x2b\xcb\x93\xf8\x6b\x4e\x20\x4e\x6e\xc8\xbc\x2d\xb0\x68\x46\x14\x4e\xf2\x9f\x05\x67\xcf\x30\x4d\x7c\xe1\x42\x3d\xa1\x1e\x36\xaf\x47\xf5\x14\x17\x17\x20\xd4\x92\x4b\xb0\x6a\x8d\xd2\x00\xd5\x08\x4a\xe2\x85\xe5\x1b\xf4\x31\x67\x90\x81\x55\x9d\x90\x2f\x40\x51\x67\x57\x70\xf9\xf7\x3f\xc0\x0d\x48\x65\x1b\x45\xdf\xe7\x46\x5b\x74\x13\x9c\x6e\x77\x50\x2f\xb7\xf0\x83\x52\x72\x4b\x52\x92\x5c\x93\x59\x57\x86\x77\xe1\x1c\x2e\xf8\x5c\x71\x8d\xe6\x7d\x7a\xf8\x0b\xe2\x24\x23\xe9\xb7\x68\x02\x83\xcb\xff\xe0\xf3\x34\x4f\x67\x83\x3a\x6d\xb3\x40\xba\x44\x69\xfb\x60\xc6\x61\xc0\xab\xfd\x50\x18\x34\x4e\xb4\x61\x9f\x00\x65\xa9\x18\x0e\x77\xaa\xff\xb1\xb5\x68\x86\xff\xfe\x3f\x1a\xc3\x60\x85\xcf\x83\xce\x08\x06\x57\xd3\xe9\x84\x44\xc9\xe1\x22\x17\x54\x18\x3c\xda\x0b\xbb\x10\xda\x87\xef\x86\x3e\x9e\xe6\xd9\x75\x83\x41\x63\xb8\xea\xf5\x83\xe7\x5f\x53\x47\x69\x79\x49\x2d\x7a\x9d\xe9\x63\xf7\xd1\x8f\x85\xfc\x44\x56\x6b\xdc\x9e\x43\x8a\x96\x96\x3f\xe2\x71\x56\x56\xbb\xe3\xa8\xbc\x71\xc5\x1a\xb7\x1e\xd2\xab\x99\x6b\xdc\x76\x78\x2a\xba\xdd\xa0\xb4\x2d\x98\xa7\x15\xd6\x9f\x08\x1a\x4b\xa5\x19\x50\x21\x5e\x05\x1b\xca\x10\x1e\x39\x85\xf6\x5c\xe9\x73\x7a\x51\x7d\x2c\x4e\xa7\x1c\x99\x61\xe7\xc8\x02\x91\x15\x0b\x25\x58\x9d\xbd\x76\xc5\x7f\x57\x8b\xe6\xdd\x5e\x87\xf6\xe4\x1f\xee\x1e\xd8\x2d\xaa\xad\x86\x4b\xc6\x1f\x39\x73\x54\x1c\xab\xe6\x2c\x88\x3b\x36\xbc\xc5\xb2\xe7\xd2\x1f\x43\x5a\x27\xa8\x84\xab\x6f\x99\xfd\x7d\xea\xb4\x38\x88\x59\x6e\x05\xbe\xf3\x5a\x6c\x0a\x6a\xe7\x2e\x9c\x16\x7e\x8b\x35\xfe\x0d\xdb\xf8\x18\x9c\x16\xa3\xfd\x3f\x0c\x95\x32\xe7\x6d\x93\x15\x35\xab\xc3\xb3\xe5\xb7\xfb\xf7\x86\x29\xe3\x30\x28\x95\xb4\x07\xc7\x5f\x6d\xd6\xaf\x00\x00\x00\xff\xff\xc6\x6f\x81\xb8\x47\x09\x00\x00")

func schemaInitSQLBytes() ([]byte, error) {
	return bindataRead(
		_schemaInitSQL,
		"schema/init.sql",
	)
}

func schemaInitSQL() (*asset, error) {
	bytes, err := schemaInitSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/init.sql", size: 2375, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/init.sql": schemaInitSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"init.sql": {schemaInitSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
