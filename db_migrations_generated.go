// Code generated by go-bindata.
// sources:
// schema/init.sql
// DO NOT EDIT!

package hydrocarbon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaInitSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\x4b\x6f\xdb\x30\x0c\xc7\xcf\xf6\xa7\xe0\xad\x09\x90\x0c\x43\x37\xec\xb2\x53\xda\xaa\x80\xb1\xd4\xe9\x12\x07\x48\x77\x31\x54\x8b\x76\x84\xd9\x92\xa7\x47\xd2\x7c\xfb\x41\x7e\xb4\x76\x1e\xc3\xd2\x61\x45\x2f\x79\x88\xa4\x28\xfe\x7f\x26\xe5\xeb\x39\x99\x44\x04\xc8\x2a\x22\xe1\x22\x98\x85\x10\xdc\x42\x38\x8b\x80\xac\x82\x45\xb4\x80\x32\x4b\xd4\xae\x34\xf2\xab\xef\x37\x9e\xd1\xe4\x6a\x4a\xc0\x6a\x54\x1a\x06\xbe\xc7\x19\x2c\x97\xc1\x0d\xdc\xcf\x83\xbb\xc9\xfc\x01\xbe\x91\x07\xb8\x21\xb7\x93\xe5\x34\x82\x0c\x45\xac\xa8\x60\xb2\x88\xad\xe5\x6c\x30\x1c\xf9\xbe\x97\x28\xa4\x06\x59\x4c\x0d\x44\xc1\x1d\x59\x44\x93\xbb\xfb\xe8\x47\x95\x33\x5c\x4e\xa7\xcf\xc1\x42\x6e\x5d\x80\x67\x4b\x76\x8e\xbf\xef\x69\xa3\x78\x89\x71\x62\xb5\x91\x05\xaa\x98\x33\x88\xc8\x2a\x1a\xf9\x1e\x16\x94\xe7\xd5\x9f\xe7\x70\x7f\xf8\x52\xd9\x32\x0c\xbe\x2f\x09\x04\xe1\x0d\x59\xd5\x05\xc6\x55\x44\x6c\x05\xff\x15\x73\xf6\x04\xb3\xb0\x2d\x3c\x97\x5b\x54\x83\xca\x3c\x74\x5b\x8c\xc7\x20\xa9\x35\xeb\x98\x26\x09\x6a\x1d\x1b\xf9\x13\x85\x06\xaa\xd0\x45\x30\x30\x12\x0a\x2a\x68\x86\x50\x3b\x40\xa6\xa8\x30\xda\xc5\xa5\x4a\x16\x20\xad\xaa\x37\x80\x5c\x66\x5c\x40\xa9\xe4\x86\x33\x97\x6a\x0c\x19\x37\x6b\xfb\x38\x02\xb3\xe5\xc6\xa0\x1a\x41\x26\x65\x96\x63\x1f\xc8\xb1\xec\xe7\xe3\xf1\x5c\x79\x71\x1b\x34\x27\xb7\x64\x4e\xc2\x6b\xb2\x68\xca\x6e\x55\x73\x32\xb7\x27\xec\xeb\xe9\x2c\xdd\x43\xec\x5b\x7b\xc6\x18\x9f\x4a\xae\x76\x47\xb9\xba\x8d\xc6\x63\xd8\x56\xfa\x81\xc2\x54\xa1\x5e\x43\x53\x98\x91\xe0\x7b\xcd\xda\x89\x3c\x3d\xeb\x9f\x12\xf9\x0d\xbe\x5a\xf7\x0e\x37\x29\x70\x6c\x78\x81\xed\x5a\xcb\xb1\x76\xe4\x69\xc3\xeb\xf2\xc3\x47\xe0\x1a\x84\x34\x95\x47\x9f\x4a\xe5\xfb\x26\x38\xce\x6c\x2b\xdf\xeb\xc8\xd6\xda\x50\x24\x92\xe1\xa0\x73\x90\xc7\x9d\x41\x3d\xf8\x74\x39\x1c\xc1\xc5\x23\xd5\xf8\xe5\xf3\x45\x73\x2c\x06\x57\xb3\xd9\x94\x4c\xc2\xc3\x14\x29\xcd\x35\x9e\x6c\xac\xae\x24\x0d\x9d\xa6\xb5\xfa\x62\x55\xdf\x0d\x1b\x8d\x5a\x73\xd9\xa3\xd3\xd2\x70\x0c\x50\x18\x9e\x50\x83\xad\x9f\xee\x43\x68\x57\xdf\x15\x80\x7a\x67\x9a\xa1\x30\x07\xcf\x2e\x2f\x0f\x9b\xea\x5f\x70\xd1\xc4\xf0\x0d\x9e\x06\x66\x94\x3d\xcd\xab\x55\xaf\xcf\xea\x45\xd3\x2e\xa7\x92\xee\x0a\x14\xa6\x26\xb4\x5d\xa3\xfb\x74\xcd\x9b\x48\xc5\x80\xe6\xf9\x8b\x43\x41\x19\xc2\x86\x53\xa8\xa7\x75\x1f\xd8\xb3\xd7\xfb\x02\x76\xce\x45\xd4\x4e\x95\x14\x91\xc5\xa9\xcc\xab\x51\xee\x54\x69\x7f\xcb\xb4\xb2\xed\x3d\xaa\x3d\xf7\x77\x77\xbb\x76\x8b\xaa\xab\xe1\x82\xf1\x0d\x67\x96\xe6\xa7\xaa\x79\x15\xc4\x8e\x0c\xc7\x58\xf6\x54\x7a\x33\xa4\xd5\xa5\x97\x5b\x37\xfc\xf7\x1b\xd6\xaa\xfc\x60\xcd\x70\x93\xe3\x5f\xbe\x6c\x54\x05\xd5\x7b\xc7\x56\xe5\x6d\x93\x55\xfa\x0d\xea\xf5\x11\x58\x95\x0f\xf7\x5f\xc3\x4a\xa9\x5f\xd7\x26\x6b\xaa\xd7\x87\x43\xe6\xbf\xeb\x77\x44\x94\x91\xef\x25\x52\x98\x83\x39\xe8\xc4\xfa\x1d\x00\x00\xff\xff\xee\x53\xf7\x14\x9d\x0a\x00\x00")

func schemaInitSQLBytes() ([]byte, error) {
	return bindataRead(
		_schemaInitSQL,
		"schema/init.sql",
	)
}

func schemaInitSQL() (*asset, error) {
	bytes, err := schemaInitSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/init.sql", size: 2717, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/init.sql": schemaInitSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"init.sql": {schemaInitSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
