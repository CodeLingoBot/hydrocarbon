// Code generated by go-bindata.
// sources:
// dist/hydrocarbon.min.css
// DO NOT EDIT!

package web

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _distHydrocarbonMinCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x94\x41\x6f\xe3\x38\x0f\x86\xff\x4a\x80\xa2\x98\x0b\x1d\x38\x69\x9a\x69\x6d\x7c\x1f\xb0\x58\xec\x9c\xf6\x36\xc7\xc5\x1c\x28\x8b\xb6\xb9\x91\x25\x55\xa2\xd3\x64\x0c\xff\xf7\x85\x6c\xa7\x4d\xa6\x9d\x93\x6d\x2a\x62\xc8\xe7\x7d\x49\x04\x54\x2a\x00\x56\xc1\xd9\x73\x07\xa8\x75\xa0\x18\x01\xbd\x37\x24\x80\x41\xb8\x32\x04\x18\x59\x13\x60\xaf\xd9\x81\x02\xc5\x0d\x28\xe3\xaa\xc3\x4b\xef\x84\x40\x39\x7d\x86\x0a\xed\x11\x23\x54\xe8\x85\x9d\x85\x8a\xac\x50\x80\x8a\x85\xa0\x72\x9a\x40\x6b\xd0\x64\x40\x93\x20\x9b\x08\xba\xb6\xa0\xf9\x08\xda\x80\x16\xa0\x0e\xa8\x53\xa4\xa1\x66\x32\x3a\x92\x40\xcd\xcd\x25\x55\xcd\x4d\x1f\x08\x6a\xe7\x52\xc6\xda\x85\x0e\xda\x0d\xb4\x5b\x68\x1f\xa0\xdd\x41\xfb\x08\xed\x1e\x5a\x42\x4d\x01\xda\x26\xb8\xde\x43\x2b\x9d\x01\x06\xae\x03\x76\x04\xdc\x35\xc0\x36\xc2\x41\x69\x30\xa8\xc8\x80\xa1\x86\xac\x06\xc3\xd0\x61\x38\x40\x47\xb6\x07\x8b\x47\x70\xea\x5f\xaa\x04\x9c\x01\xd7\x8b\xef\x05\x3c\xf8\x40\xf0\x02\xa1\x57\x67\x88\x10\xb1\xf3\x10\xa9\x9a\xea\x8a\x1d\x1a\x03\xd1\xa3\x85\x28\x81\x0f\x94\x1e\xce\x36\x10\x7b\x05\xb1\xef\x3a\x0c\x67\x88\xbd\x07\x41\x65\x08\x64\xc2\x24\x1a\x24\x75\x02\xd2\x82\xa4\xa2\x41\xb8\x23\x90\x00\x22\xd0\x43\x6f\xe0\x88\x01\x8e\xac\xc9\x0d\x1d\x86\x86\x6d\x91\x97\x1e\xb5\x66\xdb\x14\x79\xa9\x5c\xd0\x14\x8a\xbc\x3c\x52\x52\x06\x4d\x86\x86\x1b\x5b\x28\x8c\x64\xd8\x52\x59\x3b\x2b\x05\xdb\x96\x02\xcb\xf4\x91\x45\xfe\x49\xc5\x26\xcf\xef\xc7\x5b\x31\x2f\x4a\xfc\x96\xf4\x2d\xd2\x37\x46\x4b\xfb\x83\xe6\xe8\x0d\x9e\x8b\xc9\x08\x63\x6a\x6e\x48\x15\x64\x2d\x71\xd3\x4a\xb1\x19\x9d\x81\xde\x0c\x86\xa3\x64\x51\xce\x86\x0a\xeb\x2c\x8d\x57\xbe\x79\x19\xa6\x67\xfc\xf5\xa0\xc0\x3a\xfd\xff\x55\x40\x51\xed\x92\x0e\xcb\xc9\xcb\x12\x18\x2a\x67\x85\xac\x14\x5f\xbe\x94\x97\xd7\x29\xd7\x44\x7c\x98\x61\x65\xd1\x63\x75\x4d\x2f\xab\x9c\x31\xe8\x23\x15\x97\x97\x71\x9d\x88\x28\x0c\xc3\x2b\x6b\x69\x8b\x87\xfc\x7e\x5c\x2f\x09\x97\xd0\xd7\xfc\xbe\x9c\xf5\xc8\x0c\xd5\x32\xfd\xc4\xf0\x1b\x84\xda\xd0\x69\xd4\x7c\x5c\xad\x93\x3f\x2f\xca\x61\x2f\xae\x9c\xef\x3f\xe6\xf7\xa5\x72\xa7\xa4\x46\xaa\x65\xa9\x44\xb9\xd3\xc8\xd6\xf7\xf2\x8f\x9c\x3d\xfd\x4f\xf5\x22\xce\xfe\x80\xab\x50\xa0\x48\x72\x13\x89\xbd\xea\x58\x7e\x0c\x0a\xab\x43\x92\xc6\xea\xd4\x90\x0b\xc5\xdd\xc3\xd3\xd3\xfe\xf1\xf9\xe2\x91\x04\xa2\x5c\x4e\xea\xba\x7e\x33\xd1\x93\x3f\xad\x36\x7b\x7f\x2a\x85\x4e\x92\x69\xaa\x5c\xc0\x24\xe8\x7c\x61\xa9\x7c\xe7\x4f\xab\xad\x3f\x8d\x53\x37\xbf\x12\x28\xf2\x55\xea\x6c\xae\x7c\x9e\xa8\xa1\x36\x0e\xa5\x48\x68\xc6\x39\x50\x19\xc2\x30\x05\xca\x1b\xa7\x2c\x3c\xa6\x04\x93\x69\x3e\xf6\x51\x57\xb5\xae\xdf\x6a\xdf\xec\x36\x4f\xdb\x87\xd9\xcb\x35\x76\x6c\xce\xc5\x77\xb4\x31\xfb\x4e\x81\xeb\xb9\x89\x40\x56\x53\x48\xcd\x39\x2f\xdc\xf1\x4f\xfa\x9b\x1a\x56\x6c\x58\xce\x49\x95\x37\x2d\x97\xfa\x37\x81\xba\xd5\x2c\x8e\x0b\x3a\x7b\x0d\xe8\x0b\x15\x08\x0f\x59\xfa\x5e\x2a\x7c\xce\xef\xaf\x07\x28\x11\xbb\xf1\xf7\x7a\x37\xa5\x9e\x08\x4d\x55\xcc\x93\x38\x2f\xbe\x91\x87\xf9\xee\x64\x7c\x16\x34\x5c\x8d\xed\x66\x78\x4f\xb8\xdd\xf9\xd3\xd8\x6e\xaf\x23\xf9\x05\xb8\x77\x91\x27\x49\x02\x19\x14\x3e\xd2\x8c\xfa\x77\xf1\x82\xed\x11\x0d\xeb\xc5\xf0\xc5\xc6\x9f\x56\xd1\x19\xd6\xab\xbb\xbf\xbe\xed\xbf\xed\xff\x1c\xe7\x89\x7e\xbf\x8f\x2a\x3a\xd3\x0b\x95\x61\xea\x25\x4d\x86\x88\xeb\x8a\xbc\x9c\xcc\xfd\xbe\x71\x12\xa9\xf2\x43\x77\xd7\x5c\x92\x4b\xee\xe6\x55\x31\xb8\x23\x85\xda\xb8\xd7\xa2\x65\xad\xc9\x96\x9f\x2d\xb0\x0f\x6a\x6f\xb7\x5f\x77\x7f\x3c\x96\xef\x7b\x22\x4b\x36\x9f\xe7\x78\x49\xfc\xff\xab\x49\x63\x3b\xa9\x30\x7b\xe9\xda\x75\xbc\x36\xae\x71\x33\xcf\xd7\x59\x23\xe5\x8c\xa6\x70\x95\x65\x3d\xf5\xbb\x98\x75\x7a\xbf\x3a\x5c\xe1\xed\x4e\x7b\x87\xb0\xbb\x8c\xcc\xad\x41\x3f\x72\xf9\x6c\xa4\xc6\x94\xb9\x68\x13\x9b\x4f\xbc\xbe\xa1\xfd\xe3\x73\x3e\xfe\x17\x00\x00\xff\xff\x74\xab\x66\xc2\x86\x07\x00\x00")

func distHydrocarbonMinCssBytes() ([]byte, error) {
	return bindataRead(
		_distHydrocarbonMinCss,
		"dist/hydrocarbon.min.css",
	)
}

func distHydrocarbonMinCss() (*asset, error) {
	bytes, err := distHydrocarbonMinCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/hydrocarbon.min.css", size: 1926, mode: os.FileMode(420), modTime: time.Unix(1487622020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/hydrocarbon.min.css": distHydrocarbonMinCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"hydrocarbon.min.css": &bintree{distHydrocarbonMinCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

