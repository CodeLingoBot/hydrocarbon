// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x96\x6d\x6f\xdb\x36\x10\xc7\x5f\x4b\x9f\xe2\xd0\x37\xb6\x31\x7b\x70\x8a\x61\xc3\x9a\x57\x6e\xc2\xa2\xda\x1c\xb9\xb3\xe5\x2d\xdd\x30\x10\xb4\x78\x76\x38\x4b\xa4\x46\x52\x69\xbc\xa2\xdf\x7d\x20\x25\x39\xf2\x43\x96\x07\x64\xc1\x06\x18\x10\x4c\xfd\x29\x1e\xef\xf7\xbf\x23\xcf\xa6\x64\x94\x10\x20\x97\x09\x89\x67\xd1\x24\x86\xe8\x1d\xc4\x93\x04\xc8\x65\x34\x4b\x66\x50\xac\x52\xbd\x29\xac\x3a\x0d\xef\x11\xbe\x2a\x4b\xc1\x07\xca\x98\xe2\xd5\xbd\xda\x54\x58\xbc\xb1\xa7\x61\xa3\x4b\x46\x6f\xc7\x04\x4a\x83\xda\x40\x37\x0c\x04\x87\xf9\x3c\x3a\x87\x0f\xd3\xe8\x62\x34\xfd\x08\x3f\x92\x8f\x70\x4e\xde\x8d\xe6\xe3\x04\xdc\x2a\x74\x85\x12\x35\xb3\x48\xaf\x4f\xf2\xb4\xdb\xeb\x87\x61\x90\x6a\x64\x16\x39\x65\x16\x92\xe8\x82\xcc\x92\xd1\xc5\x87\xe4\x57\xbf\x68\x3c\x1f\x8f\xb7\xf3\xa5\xfa\xe4\x26\x04\x65\xc1\x1f\xa3\x0f\x03\xc6\x73\x21\xe1\xed\x64\x32\x26\xa3\xf8\x50\xb7\x64\x99\x41\xa7\x33\x56\x8b\x02\x69\x5a\x1a\xab\x72\xd4\x54\x70\x38\x8b\x12\x72\x99\xf4\xb7\xef\x4c\xb9\x30\xa9\x16\x85\x15\x4a\xee\xbc\xcf\x98\xb1\xb4\x60\x9b\x1c\xa5\xa5\x2e\xbe\x76\x6c\xfd\x30\xc0\x9c\x89\xac\x96\x6f\x43\x70\x8b\xce\xe3\xe8\xa7\x39\x81\xae\x17\xf4\xc2\xde\x69\x18\x0e\x06\x90\xa9\x95\x90\x60\xd5\x1a\xa5\x01\xa6\x11\x94\xc4\x81\x15\x39\x36\x63\xa5\x41\x0e\x56\xd5\x42\xb1\x04\xc5\x4a\x7b\x05\xaf\xbf\x1e\x82\x30\x20\x95\xf5\x8a\x5d\x4a\x5e\x4b\xeb\x0f\x3c\x09\x56\xe0\x40\xd3\x66\xde\x94\xbc\x23\x53\x12\x9f\x91\x59\x6d\x80\xf6\xbe\xfe\x65\xaa\x01\xde\x14\x42\xa3\x79\x98\x1e\xbe\x82\x28\x4e\xc8\xf4\xe7\xd1\x18\x3a\xaf\xbf\x81\xf7\x93\xf9\x74\xd6\x71\x61\xfa\x0d\xb1\x15\x4a\x0b\x7b\x68\x02\x51\xc0\x59\x74\x3e\xdd\xd9\x95\x4f\x5e\xa5\x6c\x16\x40\x99\x2a\x8e\xdd\x15\x4a\xaa\x99\xe4\x2a\xa7\x8b\x8d\x45\xd3\x3d\xf9\xb6\xd7\x87\xce\x15\xde\x74\xea\xc4\xf1\x7b\x2c\xe8\xd9\xd7\xc0\x6a\x57\x44\xf1\x39\xb9\xdc\xe1\x56\x3d\xa8\xe0\x37\x30\x89\xf7\x88\xfa\x67\x6d\x20\x83\xc6\x08\xb5\x63\xa1\xc6\x32\xce\x28\x28\xad\x48\x9d\x4b\x6b\x9d\xd9\x75\x4a\x33\xfa\xbf\x77\xc9\x23\xf1\xae\x71\xd3\xd4\xe8\xe3\xf0\xb2\xd4\x8a\x6b\xbc\x1b\xb0\xd5\xe5\xdd\x7c\x9b\x6c\xd3\x35\x6e\x1a\xb2\xb7\x04\xd6\xb8\xa9\x99\x2e\x55\xc6\x5d\x02\xdb\x30\x73\x26\xa4\x65\x42\x42\xaa\xb2\x0c\x53\xeb\xe7\xa8\x25\x2c\x11\xf9\x1e\xd4\x66\xfa\xf3\x32\x9d\xcf\xc8\x74\xd6\xce\xeb\x0b\x34\x74\xc9\x72\xdc\xe5\xb9\xd5\x74\x38\x2e\x59\x99\xd9\x4e\xbb\xb7\xd6\xb1\xf7\xc1\x4d\xdc\xf6\x58\x9f\x22\x9f\x4c\x21\xb9\xb8\x16\xbc\x64\xd9\xd1\xbc\x79\xdd\x7f\xf5\x70\x2b\xb2\xd2\x9d\x00\xfb\xee\x2e\x75\x76\x30\x66\x85\xcd\x70\x7f\x34\x0c\x8a\x72\x91\x89\xf4\x89\xde\xf5\xc9\xa1\x55\x10\xb4\xd4\x19\xad\xbe\x46\x4b\x29\xfe\x6c\xbc\x5c\x27\xb0\x12\xf5\xa1\xd4\x59\x0f\x7e\x79\x4f\xa6\x04\x2a\xf1\x2d\x0e\xda\x78\x54\x18\x60\xf0\x87\x72\x67\x20\x5b\x64\x08\x0b\xb4\x9f\x10\x65\xc3\x4c\xf2\xc6\xcd\x87\xa8\x68\xcb\xe7\x0f\x6d\x44\x41\x35\xe7\x98\xb4\xf9\x5a\x5b\xec\x56\x39\x26\xf5\xc1\xbd\x60\x7b\x0b\x83\x42\x0b\xa5\x85\xdd\xb8\xe3\xed\x50\x36\x74\x92\xc1\x00\xb8\x30\x45\xc6\x36\x60\xaf\x84\xf1\x51\x42\xdd\x30\x58\xe1\xda\x88\xd2\xb0\x2c\xb3\x0c\x72\xc5\x31\x0c\x6a\x31\x75\xff\xee\x2a\x32\x27\xf7\x15\xd6\x2e\x85\xdb\x32\xdb\x66\xb3\x0f\x75\xae\x7a\x6d\x03\x55\xac\x0a\x65\xec\x53\x9b\xd1\x0e\x81\x6d\x78\x07\x28\xba\x82\xbf\x44\x11\x06\x6e\x2b\x0f\x90\x77\x86\x27\x83\xe1\xc9\xe0\xe4\xfb\xef\x86\x30\x1c\xbe\xf1\xbf\xce\x9b\x37\xee\x5a\x67\x2c\xcb\x0b\xfb\x97\x0f\x56\x49\xeb\x2e\x91\x57\xcc\x5c\x1d\x5e\x18\x8f\x17\x71\xe0\xce\x74\xa5\xef\xc2\xd5\xe9\x87\xc1\x42\xf1\xcd\x43\xba\x84\xbb\x59\x59\xcd\xe0\x87\xd9\x24\x7e\xdb\x6e\xa2\xed\xb8\x76\x70\x56\x8d\xc0\xe3\xa4\x35\x18\x5f\xf6\x35\xe0\xc6\x01\x55\x95\x6b\x64\x1c\x8c\x65\xb6\x34\x68\xc0\x6a\x96\xae\x85\x5c\xed\x3a\xc3\x69\xe8\x56\xd3\xad\xf2\xfb\x8f\xb8\xfd\x52\xfb\x87\xd4\x31\xa1\x2f\xfc\x27\x58\x62\xcf\xe9\x75\x40\x7d\xa8\x17\x3c\x62\x6f\x93\x6a\x56\xe0\xb3\x18\xfc\xd9\x7c\x8d\x92\x1f\xa8\x6b\xcb\x2d\xc5\xaa\x42\x7e\xeb\x9a\xcf\x5f\x7c\x89\x73\x66\xcb\xdc\xf8\x06\xd3\xea\x2b\x81\x65\x66\x7d\x30\x1a\x06\xa8\xb5\xd2\xc6\x9b\xea\xb7\xdf\x8f\x58\xf1\xf3\x97\x4e\xd8\x3b\xfd\x3b\x00\x00\xff\xff\xf0\x58\x63\x8d\xba\x0e\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 3770, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
