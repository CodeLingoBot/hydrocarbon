// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x61\x6f\xdb\x36\x10\xfd\x2c\xfd\x8a\x43\xbf\xc8\x46\xed\xc1\x29\x86\x0d\x6b\x3e\xb9\x09\xbb\x6a\x4b\xe4\x4e\x92\xd7\x74\xc3\x20\x30\xe2\xd9\xe1\x22\x91\x1a\x49\xb5\xf1\x86\xfd\xf7\x81\x94\xe4\x4a\x56\xd2\x26\xc1\x56\x74\x40\x00\x3b\xe4\x23\x79\xbc\xf7\xde\xf1\x7c\x12\x93\x65\x4a\x80\x5c\xa4\x24\x4a\xc2\x55\x04\xe1\x4b\x88\x56\x29\x90\x8b\x30\x49\x13\xa8\xb6\xb9\xda\x55\x46\x1e\xfb\x9f\x00\x3e\xa9\x6b\xce\xe6\x52\xeb\xea\xc9\x27\xb1\x39\x37\x78\x63\x8e\xfd\x0e\x97\x2e\x5f\x9c\x11\xa8\x35\x2a\x0d\x13\xdf\xe3\x0c\xd6\xeb\xf0\x14\x5e\xc7\xe1\xf9\x32\x7e\x0b\x3f\x92\xb7\x70\x4a\x5e\x2e\xd7\x67\x29\xd8\x53\xb2\x2d\x0a\x54\xd4\x60\xf6\xee\xa8\xcc\x27\xd3\x99\xef\x7b\xb9\x42\x6a\x90\x65\xd4\x40\x1a\x9e\x93\x24\x5d\x9e\xbf\x4e\x7f\x71\x87\x46\xeb\xb3\xb3\xfd\x7a\x21\xdf\xdb\x05\x5e\x5d\xb1\x87\xe0\x7d\x8f\xb2\x92\x0b\x78\xb1\x5a\x9d\x91\x65\x34\xc6\x6d\x68\xa1\xd1\xe2\xb4\x51\xbc\xc2\x2c\xaf\xb5\x91\x25\xaa\x8c\x33\x38\x09\x53\x72\x91\xce\xf6\x73\xba\xbe\xd4\xb9\xe2\x95\xe1\x52\x0c\xe6\x0b\xaa\x4d\x56\xd1\x5d\x89\xc2\x64\x36\xbe\x7e\x6c\x33\xdf\xc3\x92\xf2\xa2\x85\xef\x43\xb0\x87\xae\xa3\xf0\xa7\x35\x81\x89\x03\x4c\xfd\xe9\xb1\xef\xcf\xe7\x50\xc8\x2d\x17\x60\xe4\x35\x0a\x0d\x54\x21\x48\x81\x73\xc3\x4b\xec\xc6\x6a\x8d\x0c\x8c\x6c\x81\x7c\x03\x92\xd6\xe6\x0a\x9e\x7d\xb5\x00\xae\x41\x48\xe3\x10\x43\x96\x1c\x36\x6b\x37\x78\x14\x59\x9e\x25\x3a\xeb\xd6\xc5\xe4\x25\x89\x49\x74\x42\x92\x56\x00\xfd\x7b\xfd\xc7\xac\x7a\x78\x53\x71\x85\xfa\x7e\x78\x78\x0a\x61\x94\x92\xf8\xe7\xe5\x19\x04\xcf\xbe\x86\x57\xab\x75\x9c\x04\x36\x4c\x77\x21\xba\x45\x61\xe0\x80\x1a\x8f\x57\x70\x12\x9e\xc6\x83\x5b\xb9\xe4\x35\xc8\xee\x00\x14\xb9\x64\x38\xd9\xa2\xc8\x14\x15\x4c\x96\xd9\xe5\xce\xa0\x9e\x1c\x7d\x33\x9d\x41\x70\x85\x37\x41\x9b\x38\xf6\x09\x09\x3a\xee\x5b\xc2\x5a\x55\x84\xd1\x29\xb9\x18\xf0\xd6\x7c\x64\x9c\xdd\xc0\x2a\x3a\x60\xd4\x7d\xb6\x02\xd2\xa8\x35\x97\x03\x09\x75\x92\xb1\x42\x41\x61\x78\x6e\x55\xda\xe2\xf4\x50\x29\xdd\xe8\xff\x5e\x25\x0f\xa4\xf7\x1a\x77\x9d\x47\x1f\x46\x2f\xcd\x0d\x7f\x87\x77\x13\x6c\x54\x7d\x37\xbf\x5d\xb6\xb3\x6b\xdc\x75\xcc\x7e\x60\xe0\x1a\x77\x2d\xa7\x1b\x59\x30\x9b\xc0\x3e\x99\x25\xe5\xc2\x50\x2e\x20\x97\x45\x81\xb9\x71\x6b\xe4\x06\x36\x88\xec\x80\xd4\x6e\xf9\xbf\xcb\xe9\x3a\x21\x71\xd2\xcf\xeb\x67\x28\xe8\x82\x96\x38\xe4\x73\x8f\x09\x18\x6e\x68\x5d\x98\xa0\x5f\x5b\xdb\xd8\x67\x60\x17\xee\x6b\xac\x4b\x91\x4b\x26\x17\x8c\xbf\xe3\xac\xa6\xc5\xad\x79\x73\xb8\x2f\xf5\x71\xab\x8a\xda\xbe\x00\x87\xea\xae\x55\x31\x1a\x33\xdc\x14\x78\x38\xea\x7b\x55\x7d\x59\xf0\xfc\x91\xda\x75\xc9\xc9\x9a\x20\xb2\x5a\x15\x59\xb3\x5b\x56\x0b\xfe\x47\xa7\xe5\x36\x81\x0d\x68\x06\xb5\x2a\xa6\xf0\xe6\x15\x89\x09\x34\xe0\x0f\x74\x64\x9d\x46\xb9\x06\x0a\xbf\x4b\xfb\x06\xd2\xcb\x02\xe1\x12\xcd\x7b\x44\xd1\x71\x26\x58\xa7\xe6\x31\x55\x59\x4f\xe7\xf7\x2d\x44\x5e\xb3\xe6\x36\x68\xb7\x5b\x1f\x6c\x4f\xb9\x0d\xea\x82\xfb\x8c\xe5\xcd\xf7\x2a\xc5\xa5\xe2\x66\x67\x9f\xb7\x31\x6c\x61\x21\xf3\x39\x30\xae\xab\x82\xee\xc0\x5c\x71\xed\xa2\x84\xb6\x60\xd0\xca\x96\x11\xa9\x60\x53\x17\x05\x94\x92\xa1\xef\xb5\xe0\xcc\xfe\x77\x97\xc9\x2c\xdc\x39\xac\x6f\x85\x0f\x36\xdb\x67\x73\x06\x6d\xae\xa6\x7d\x01\x35\x5c\x55\x52\x9b\xc7\x16\xa3\x01\x03\xfb\xf0\x46\x54\x4c\x38\xfb\x1c\x26\xf4\xec\x55\xee\x01\x0f\x16\x47\xf3\xc5\xd1\xfc\xe8\xbb\x6f\x17\xb0\x58\x3c\x77\x7f\xc1\xf3\xe7\xb6\xad\xd3\x86\x96\x95\xf9\xd3\x05\x2b\x85\xb1\x4d\xe4\x15\xd5\x57\xe3\x86\xf1\x76\x13\x7b\xf6\x4d\x97\xea\x2e\xba\x82\x99\xef\x5d\x4a\xb6\xbb\x4f\x95\xb0\x9d\x95\x51\x14\x7e\x48\x56\xd1\x8b\x7e\x11\xed\xc7\x35\xa0\xb3\x29\x04\x8e\xce\xac\x25\xc6\xd9\xbe\x25\xb8\x53\x40\xe3\x72\x85\x94\x81\x36\xd4\xd4\x1a\x35\x18\x45\xf3\x6b\x2e\xb6\x43\x65\x58\x4c\xb6\xc7\x4c\x9a\xfc\x7e\x94\x6e\x77\xd4\xe1\x23\x75\x1b\xd0\x19\xff\x11\x92\x38\x50\x7a\x1b\xd0\x0c\xda\x03\x87\xf2\x7e\xfb\x9a\x80\xce\x15\xb5\xbf\x17\x8c\x6d\xb2\x96\x09\x90\x68\x7d\x6e\xaf\x12\xbc\x59\x86\x69\x18\x7d\x6f\x29\x09\xe2\x75\x14\x75\xdf\x49\x1c\xaf\x62\x72\xea\xbe\x27\xeb\x93\x13\x92\x24\xc1\xd8\x34\xcd\xb6\x5f\xa6\x6d\x7c\x4f\xe7\x57\xc8\xea\x02\x1d\x7b\xca\xdc\xdb\x3f\x0e\x3d\x3e\x68\xaf\x5f\xeb\x98\xb9\x33\xcf\xde\x37\x4f\x87\xd6\x39\x70\x91\x87\x82\xdd\xc7\x90\x0f\xde\xd8\xc5\x6a\xdb\xe6\x3e\xbd\xe3\x7d\x7b\x24\xa3\x52\x52\x69\xe7\xb2\x5f\x7f\xbb\x05\xfa\xd7\xdf\xc1\x47\x9e\xf1\x5c\x8a\x0d\xdf\x36\x66\x1c\xad\x31\xd2\xd0\xc2\xfe\xd8\xac\x4b\xed\x1e\x80\x5e\xdd\x6f\x27\x15\x1a\xc5\xf1\xae\x59\x43\xf5\xf5\xc1\xdc\xd8\xd8\xad\xe4\xb2\xca\x36\x98\x6a\xdf\x9f\x76\x42\xb4\x2e\x18\xf3\x3e\x73\x1e\xc7\x19\x34\xd7\x9f\x1e\xff\x13\x00\x00\xff\xff\x0e\x1e\x09\x1a\xac\x10\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 4268, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
