// Code generated by go-bindata.
// sources:
// schema/01_init.sql
// schema/02_updated_at_triggers.sql
// DO NOT EDIT!

package pg

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schema01_initSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x61\x6f\xdb\x36\x10\xfd\x2c\xfd\x8a\x43\xbf\xc8\x46\xed\xc1\x29\x86\x0d\x6b\x3e\xb9\x09\xbb\x6a\x4b\xe4\x4e\x92\xd7\x74\xc3\x20\x30\xe2\xd9\xe1\x22\x91\x1a\x49\xb5\xf1\x86\xfd\xf7\x81\x94\xe4\x4a\xb6\xd3\x3a\xc1\x56\x74\x40\x00\x3b\xe4\x23\x79\xbc\xf7\xde\x1d\x7d\x16\x93\x79\x4a\x80\x5c\xa5\x24\x4a\xc2\x45\x04\xe1\x4b\x88\x16\x29\x90\xab\x30\x49\x13\xa8\xd6\xb9\xda\x54\x46\x9e\xfa\x9f\x00\x3e\xa9\x6b\xce\xa6\x52\xeb\xea\xc9\x27\xb1\x39\x37\x78\x67\x4e\xfd\x0e\x97\xce\x5f\x5c\x10\xa8\x35\x2a\x0d\x23\xdf\xe3\x0c\x96\xcb\xf0\x1c\x5e\xc7\xe1\xe5\x3c\x7e\x0b\x3f\x92\xb7\x70\x4e\x5e\xce\x97\x17\x29\xd8\x53\xb2\x35\x0a\x54\xd4\x60\xf6\xee\xa4\xcc\x47\xe3\x89\xef\x7b\xb9\x42\x6a\x90\x65\xd4\x40\x1a\x5e\x92\x24\x9d\x5f\xbe\x4e\x7f\x71\x87\x46\xcb\x8b\x8b\xed\x7a\x21\xdf\xdb\x05\x5e\x5d\xb1\x87\xe0\x7d\x8f\xb2\x92\x0b\x78\xb1\x58\x5c\x90\x79\xb4\x8f\x5b\xd1\x42\xa3\xc5\x69\xa3\x78\x85\x59\x5e\x6b\x23\x4b\x54\x19\x67\x70\x16\xa6\xe4\x2a\x9d\x6c\xe7\x74\x7d\xad\x73\xc5\x2b\xc3\xa5\x18\xcc\x17\x54\x9b\xac\xa2\x9b\x12\x85\xc9\x6c\x7c\xfd\xd8\x26\xbe\x87\x25\xe5\x45\x0b\xdf\x86\x60\x0f\x5d\x46\xe1\x4f\x4b\x02\x23\x07\x18\xfb\xe3\x53\xdf\x9f\x4e\xa1\x90\x6b\x2e\xc0\xc8\x5b\x14\x1a\xa8\x42\x90\x02\xa7\x86\x97\xd8\x8d\xd5\x1a\x19\x18\xd9\x02\xf9\x0a\x24\xad\xcd\x0d\x3c\xfb\x6a\x06\x5c\x83\x90\xc6\x21\x86\x2c\x39\x6c\xd6\x6e\xf0\x28\xb2\x3c\x4b\x74\xd6\xad\x8b\xc9\x4b\x12\x93\xe8\x8c\x24\xad\x00\xfa\xf7\xfa\x8f\x59\xf5\xf0\xae\xe2\x0a\xf5\x71\x78\x78\x0a\x61\x94\x92\xf8\xe7\xf9\x05\x04\xcf\xbe\x86\x57\x8b\x65\x9c\x04\x36\x4c\x77\x21\xba\x46\x61\x60\x87\x1a\x8f\x57\x70\x16\x9e\xc7\x83\x5b\xb9\xe4\x35\xc8\xee\x00\x14\xb9\x64\x38\x5a\xa3\xc8\x14\x15\x4c\x96\xd9\xf5\xc6\xa0\x1e\x9d\x7c\x33\x9e\x40\x70\x83\x77\x41\x9b\x38\xf6\x09\x09\x3a\xee\x5b\xc2\x5a\x55\x84\xd1\x39\xb9\x1a\xf0\xd6\x7c\x64\x9c\xdd\xc1\x22\xda\x61\xd4\x7d\xb6\x02\xd2\xa8\x35\x97\x03\x09\x75\x92\xb1\x42\x41\x61\x78\x6e\x55\xda\xe2\xf4\x50\x29\xdd\xe8\xff\x5e\x25\x0f\xa4\xf7\x16\x37\x9d\x47\x1f\x46\x2f\xcd\x0d\x7f\x87\xf7\x13\x6c\x54\x7d\x3f\xbf\x5d\xb6\xb3\x5b\xdc\x74\xcc\x7e\x60\xe0\x16\x37\x2d\xa7\x2b\x59\x30\x9b\xc0\x3e\x99\x25\xe5\xc2\x50\x2e\x20\x97\x45\x81\xb9\x71\x6b\xe4\x0a\x56\x88\x6c\x87\xd4\x6e\xf9\xbf\xcb\xe9\x32\x21\x71\xd2\xcf\xeb\x67\x28\xe8\x82\x96\x38\xe4\x73\x8b\x09\x18\xae\x68\x5d\x98\xa0\x5f\x5b\xdb\xd8\x27\x60\x17\x6e\x6b\xac\x4b\x91\x4b\x26\x17\x8c\xbf\xe3\xac\xa6\xc5\xc1\xbc\x39\xdc\x97\xda\xdc\xaa\xa2\xb6\x1d\x60\x57\xdd\xb5\x2a\xf6\xc6\x0c\x37\x05\xee\x8e\xfa\x5e\x55\x5f\x17\x3c\x7f\xa4\x76\x5d\x72\xb2\x26\x88\xac\x56\x45\xd6\xec\x96\xd5\x82\xff\xd1\x69\xb9\x4d\x60\x03\x9a\x40\xad\x8a\x31\xbc\x79\x45\x62\x02\x0d\xf8\x03\x1d\x59\xa7\x51\xae\x81\xc2\xef\xd2\xf6\x40\x7a\x5d\x20\x5c\xa3\x79\x8f\x28\x3a\xce\x04\xeb\xd4\xbc\x4f\x55\xd6\xd3\xf9\xb1\x85\xc8\x6b\xd6\x1c\x82\x76\xbb\xf5\xc1\xf6\x94\x43\x50\x17\xdc\x67\x2c\x6f\xbe\x57\x29\x2e\x15\x37\x1b\xdb\xde\xf6\x61\x33\x0b\x99\x4e\x81\x71\x5d\x15\x74\x03\xe6\x86\x6b\x17\x25\xb4\x05\x83\x56\xb6\x8c\x48\x05\xab\xba\x28\xa0\x94\x0c\x7d\xaf\x05\x67\xf6\xbf\xfb\x4c\x66\xe1\xce\x61\x7d\x2b\x7c\xb0\xd9\x36\x9b\x13\x68\x73\x35\xee\x0b\xa8\xe1\xaa\x92\xda\x3c\xb6\x18\x0d\x18\xd8\x86\xb7\x47\xc5\x88\xb3\xcf\x61\x42\xcf\x5e\xe5\x08\x78\x30\x3b\x99\xce\x4e\xa6\x27\xdf\x7d\x3b\x83\xd9\xec\xb9\xfb\x0b\x9e\x3f\xb7\xcf\x3a\x6d\x68\x59\x99\x3f\x5d\xb0\x52\x18\xfb\x88\xbc\xa1\xfa\x66\xff\xc1\x78\xd8\xc4\x9e\xed\xe9\x52\xdd\x47\x57\x30\xf1\xbd\x6b\xc9\x36\xc7\x54\x09\xfb\xb2\x32\x8a\xc2\x0f\xc9\x22\x7a\xd1\x2f\xa2\xfd\xb8\x06\x74\x36\x85\xc0\xd1\x99\xb5\xc4\x38\xdb\xb7\x04\x77\x0a\x68\x5c\xae\x90\x32\xd0\x86\x9a\x5a\xa3\x06\xa3\x68\x7e\xcb\xc5\x7a\xa8\x0c\x8b\xc9\xb6\x98\x51\x93\xdf\x8f\xd2\xed\x8e\xda\x6d\x52\x87\x80\xce\xf8\x8f\x90\xc4\x8e\xd2\xdb\x80\x26\xd0\x1e\x38\x94\xf7\xdb\xd7\x04\x74\xae\xa8\xfd\xbd\x60\xec\x23\x6b\x9e\x00\x89\x96\x97\xf6\x2a\xc1\x9b\x79\x98\x86\xd1\xf7\x96\x92\x20\x5e\x46\x51\xf7\x9d\xc4\xf1\x22\x26\xe7\xee\x7b\xb2\x3c\x3b\x23\x49\x12\xec\x9b\xa6\xd9\xf6\xcb\xb4\x8d\xef\xe9\xfc\x06\x59\x5d\xa0\x63\x4f\x99\xa3\xfd\xe3\xd0\xfb\x07\x6d\xf5\x6b\x1d\x33\x75\xe6\xd9\xfa\xe6\xe9\xd0\x3a\x3b\x2e\xf2\x50\xb0\x63\x0c\xf9\xe0\x8d\x5d\xac\xf6\xd9\xdc\xa7\x77\x7f\xdf\x1e\xc9\xa8\x94\x54\xda\xb9\xec\xd7\xdf\x0e\x40\xff\xfa\x3b\xf8\x48\x1b\xcf\xa5\x58\xf1\x75\x63\xc6\xbd\x35\x46\x1a\x5a\xd8\x1f\x9b\x75\xa9\x5d\x03\xe8\xd5\xfd\x76\x52\xa1\x51\x1c\xef\x9b\x35\x54\xdf\xee\xcc\xf9\xe3\xd3\x7f\x02\x00\x00\xff\xff\x82\x81\xf7\x20\x57\x10\x00\x00")

func schema01_initSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema01_initSQL,
		"schema/01_init.sql",
	)
}

func schema01_initSQL() (*asset, error) {
	bytes, err := schema01_initSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/01_init.sql", size: 4183, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schema02_updated_at_triggersSQL = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xc1\x8a\xb3\x30\x14\x85\xf7\x79\x8a\xbb\x10\xda\xfe\x8b\xff\x05\x64\x16\x36\xb9\xb6\x01\x27\x29\xd7\x48\x67\x27\x82\x19\x29\x23\xc6\x69\x2c\x7d\xfd\x41\x6d\x67\x64\xba\xa8\x0c\xba\xf4\x7c\xc9\x97\x73\x38\x61\x64\x10\x34\x01\xe1\x21\x89\x38\x42\x9c\x29\x6e\xa4\x56\xe0\x6d\x97\x5f\xda\xb2\xe8\x6c\x99\x17\xdd\x7a\xc3\x08\x4d\x46\x2a\x05\x43\x72\xb7\x43\x82\x28\x85\x20\x60\x5b\xdc\x49\xc5\x00\x00\x64\x0c\x67\x77\x5d\x2b\x3c\xfe\xff\xb7\x01\x99\x82\x90\xa9\x91\x8a\x1b\x88\x49\xbf\x0e\x99\x4e\x44\x9f\x99\x3d\x8e\x47\xfa\xaf\xe7\x7f\x3c\xf0\x02\x8d\xbb\xae\x37\x21\x7c\x03\xa3\xb7\xe7\xc2\xe1\x1f\x26\x29\xfe\x0e\x75\x22\x6e\xa1\x12\x20\xe3\x90\xa1\x12\x21\x0b\x02\xa8\x8b\xa6\xba\x14\x95\x85\x55\x5b\xb7\x95\xff\xac\x57\x21\x63\xb7\xd6\xf7\x22\x17\x6f\xcf\x7e\xd2\x75\xb8\x68\x8b\xb1\x26\x84\xec\x20\x86\x81\xd4\x48\x8d\xaf\x8a\x35\x01\x46\x7c\x0f\xa4\x8f\x80\x6f\xc8\x33\x83\x70\x20\xcd\x51\x64\x84\x0f\xcb\x3d\x1a\x6b\x57\x9d\x9a\xbc\x73\x1f\xb6\x79\x2e\x9e\xc2\x0b\xf9\xbd\xf5\xfe\xe4\x66\xb8\xef\xe0\x42\xde\x77\x57\x97\x73\xb6\xbe\x71\x4b\x59\xad\x2d\x67\x38\x7b\x6a\x41\x63\x3e\xbb\xec\x04\x5e\xc8\xdf\x3a\xdf\x3d\x17\x0f\xd4\xdf\x8c\x5f\x01\x00\x00\xff\xff\x79\xb5\xb3\x0b\x38\x04\x00\x00")

func schema02_updated_at_triggersSQLBytes() ([]byte, error) {
	return bindataRead(
		_schema02_updated_at_triggersSQL,
		"schema/02_updated_at_triggers.sql",
	)
}

func schema02_updated_at_triggersSQL() (*asset, error) {
	bytes, err := schema02_updated_at_triggersSQLBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/02_updated_at_triggers.sql", size: 1080, mode: os.FileMode(420), modTime: time.Unix(499137600, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/01_init.sql": schema01_initSQL,
	"schema/02_updated_at_triggers.sql": schema02_updated_at_triggersSQL,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": {nil, map[string]*bintree{
		"01_init.sql": {schema01_initSQL, map[string]*bintree{}},
		"02_updated_at_triggers.sql": {schema02_updated_at_triggersSQL, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
